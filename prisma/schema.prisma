// This is your Prisma schema file
// Single Hospital Platform - Simplified for 2-week development

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE ENUMS (Simplified)
// ============================================================================

enum Role {
  USER
  PATIENT
  DOCTOR
  ADMIN
  FAMILY_MEMBER
}

enum Gender {
  MALE
  FEMALE
}

enum FamilyRelation {
  SELF
  SPOUSE
  CHILD
  PARENT
  GRANDPARENT
  SIBLING
  OTHER
}

enum QueueStatus {
  WAITING
  CALLED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum PaymentMethod {
  CASH
  BPJS
  INSURANCE
  CREDIT_CARD
}

enum NotificationType {
  QUEUE
  APPOINTMENT
  LAB_RESULT
  PAYMENT
  SYSTEM
  CONSULTATION
}

enum NotificationPriority {
  HIGH
  MEDIUM
  LOW
}

// ============================================================================
// CORE MODELS (Essential untuk 2 minggu)
// ============================================================================

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String
  role             Role      @default(USER)
  nik              String?   @unique @db.VarChar(16)
  fullName         String
  phone            String?   @db.VarChar(15)
  gender           Gender?
  dateOfBirth      DateTime?
  qrCode           String?   @unique
  fingerprintData  String?   @db.Text
  profilePicture   String?
  isActive         Boolean   @default(true)
  emailVerified    Boolean   @default(false)
  lastLogin        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Address - simple inline
  street           String?
  village          String?
  district         String?
  regency          String?
  province         String?

  // Relations
  familyMembers    FamilyMember[]  @relation("UserFamilyMembers")
  familyOf         FamilyMember[]  @relation("FamilyMemberUser")
  appointments     Appointment[]
  queues           Queue[]
  medicalRecords   MedicalRecord[]
  labResults       LabResult[]
  notifications    Notification[]
  consultations    Consultation[]
  prescriptions    Prescription[]
  doctorProfile    Doctor?

  @@map("users")
  @@index([email])
  @@index([nik])
  @@index([role])
}

// ============================================================================
// FAMILY MANAGEMENT (Simplified)
// ============================================================================

model FamilyMember {
  id              String          @id @default(uuid())
  userId          String
  memberId        String
  relation        FamilyRelation
  nickname        String?
  isEmergencyContact Boolean      @default(false)
  isActive        Boolean         @default(true)
  addedAt         DateTime        @default(now())

  // Relations
  user            User            @relation("UserFamilyMembers", fields: [userId], references: [id], onDelete: Cascade)
  member          User            @relation("FamilyMemberUser", fields: [memberId], references: [id], onDelete: Cascade)

  @@map("family_members")
  @@unique([userId, memberId])
  @@index([userId])
}

// ============================================================================
// HOSPITAL CONFIGURATION (Single Instance)
// ============================================================================

model HospitalConfig {
  id                String    @id @default("hospital")
  hospitalName      String
  hospitalAddress   String    @db.Text
  hospitalPhone     String
  hospitalEmail     String?
  hospitalWebsite   String?
  emergencyNumber   String?
  
  queuePrefix       String    @default("A")
  maxQueuePerDay    Int       @default(100)
  operatingHoursStart String  @default("08:00")
  operatingHoursEnd String    @default("17:00")
  queueCallInterval Int       @default(5)
  
  licenseNumber     String?
  accreditationLevel String?
  hospitalType      String?
  bedCapacity       Int?
  isInitialized     Boolean   @default(false)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("hospital_config")
}

// ============================================================================
// MEDICATION MANAGEMENT (MVP untuk farmasi)
// ============================================================================

model Medication {
  id              String    @id @default(uuid())
  medicationCode  String    @unique 
  genericName     String    
  brandName       String?   
  category        String    
  dosageForm      String    
  strength        String    
  unit            String   
  manufacturer    String?   
  description     String?   @db.Text
  indications     String?   @db.Text 
  contraindications String? @db.Text 
  sideEffects     String?   @db.Text 
  dosageInstructions String? @db.Text 
  
  // Pricing & Stock (simplified for MVP)
  pricePerUnit    Decimal   @db.Decimal(10, 2)
  stock           Int       @default(0)
  minStock        Int       @default(5)
  maxStock        Int       @default(1000)
  
  // Status & Control
  isActive        Boolean   @default(true)
  requiresPrescription Boolean @default(true)
  isControlled    Boolean   @default(false) // Obat keras/narkotika
  
  // Metadata
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdBy       String?   // Staff ID yang input
  
  @@map("medications")
  @@index([medicationCode])
  @@index([genericName])
  @@index([category])
  @@index([isActive])
  @@fulltext([genericName, brandName])
}

// ============================================================================
// MEDICAL STAFF (Simplified)
// ============================================================================

model Doctor {
  id            String        @id @default(uuid())
  userId        String        @unique
  licenseNumber String        @unique
  name          String
  specialty     String
  phone         String?
  email         String?
  profilePicture String?
  consultationFee Decimal?    @db.Decimal(10, 2)
  isAvailable   Boolean       @default(true)
  isOnDuty      Boolean       @default(false)
  schedule      Json?
  bio           String?       @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments  Appointment[]
  queues        Queue[]
  consultations Consultation[]
  medicalRecords MedicalRecord[]
  prescriptions Prescription[]

  @@map("doctors")
  @@index([userId])
  @@index([specialty])
  @@index([isAvailable])
  @@index([isOnDuty])
}

// ============================================================================
// CONSULTATION & AI (Core feature) - FIXED RELATIONS
// ============================================================================

model Consultation {
  id                String    @id @default(uuid())
  userId            String
  doctorId          String?
  type              String    @default("AI")
  severity          String?
  urgency           String?
  symptoms          Json
  aiAnalysis        Json?
  chatHistory       Json?
  doctorNotes       String?   @db.Text
  recommendation    String?
  prescriptions     Json?
  followUpDate      DateTime?
  consultationFee   Decimal?  @db.Decimal(8, 2)
  paymentStatus     PaymentStatus @default(PENDING)
  paymentMethod     PaymentMethod @default(CASH)
  isCompleted       Boolean   @default(false)
  rating            Int?
  feedback          String?   @db.Text
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations - FIXED
  user              User      @relation(fields: [userId], references: [id])
  doctor            Doctor?   @relation(fields: [doctorId], references: [id])
  appointment       Appointment?
  medicalRecord     MedicalRecord?
  digitalPrescriptions Prescription[] // Fixed: Add opposite relation
  queues            Queue[]   // Fixed: Add opposite relation

  @@map("consultations")
  @@index([userId])
  @@index([type])
  @@index([severity])
  @@index([createdAt])
}

// ============================================================================
// DIGITAL PRESCRIPTION - FIXED RELATIONS
// ============================================================================

model Prescription {
  id              String    @id @default(uuid())
  userId          String
  doctorId        String
  consultationId  String?
  appointmentId   String?
  prescriptionCode String   @unique
  medications     Json      
  instructions    String?   @db.Text
  totalAmount     Decimal?  @db.Decimal(10, 2)
  pharmacyNotes   String?   @db.Text
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod @default(CASH)
  isPaid          Boolean   @default(false)
  isDispensed     Boolean   @default(false)
  dispensedAt     DateTime?
  dispensedBy     String?
  expiresAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations - FIXED
  user            User      @relation(fields: [userId], references: [id])
  doctor          Doctor    @relation(fields: [doctorId], references: [id])
  consultation    Consultation? @relation(fields: [consultationId], references: [id]) // Fixed: Now has opposite
  appointment     Appointment? @relation(fields: [appointmentId], references: [id])

  @@map("prescriptions")
  @@index([userId])
  @@index([prescriptionCode])
}

// ============================================================================
// QUEUE SYSTEM - FIXED RELATIONS
// ============================================================================

model Queue {
  id                  String      @id @default(uuid())
  userId              String
  doctorId            String?
  appointmentId       String?     @unique
  consultationId      String?
  queueNumber         String      @unique
  queueType           String      @default("WALK_IN")
  currentNumber       String?
  status              QueueStatus @default(WAITING)
  position            Int
  estimatedWaitTime   Int?
  checkInTime         DateTime?
  calledTime          DateTime?
  completedTime       DateTime?
  isPriority          Boolean     @default(false)
  queueDate           DateTime    @db.Date
  notes               String?     @db.Text
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  // Relations - FIXED
  user                User        @relation(fields: [userId], references: [id])
  doctor              Doctor?     @relation(fields: [doctorId], references: [id])
  appointment         Appointment? @relation(fields: [appointmentId], references: [id])
  consultation        Consultation? @relation(fields: [consultationId], references: [id]) // Fixed: Now has opposite

  @@map("queues")
  @@index([userId])
  @@index([queueDate])
  @@index([status])
  @@index([position])
  @@index([queueType])
}

// ============================================================================
// APPOINTMENT & SCHEDULING
// ============================================================================

model Appointment {
  id              String            @id @default(uuid())
  userId          String
  doctorId        String
  consultationId  String?           @unique
  appointmentDate DateTime
  startTime       DateTime
  endTime         DateTime
  type            String            @default("CONSULTATION")
  source          String            @default("WALK_IN")
  status          AppointmentStatus @default(SCHEDULED)
  queueNumber     String?
  reason          String?           @db.Text
  notes           String?           @db.Text
  reminderSent    Boolean           @default(false)
  rating          Int?
  feedback        String?           @db.Text
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  user            User              @relation(fields: [userId], references: [id])
  doctor          Doctor            @relation(fields: [doctorId], references: [id])
  consultation    Consultation?     @relation(fields: [consultationId], references: [id])
  prescriptions   Prescription[]
  queue           Queue?

  @@map("appointments")
  @@index([userId])
  @@index([doctorId])
  @@index([appointmentDate])
  @@index([status])
  @@index([source])
}

// ============================================================================
// MEDICAL RECORDS
// ============================================================================

model MedicalRecord {
  id              String      @id @default(uuid())
  userId          String
  doctorId        String
  consultationId  String?     @unique
  visitDate       DateTime
  queueNumber     String?
  diagnosis       String      @db.Text
  treatment       String      @db.Text
  symptoms        Json?
  vitalSigns      Json?
  medications     Json?
  followUpDate    DateTime?
  totalCost       Decimal?    @db.Decimal(10, 2)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod @default(CASH)
  notes           String?     @db.Text
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user            User        @relation(fields: [userId], references: [id])
  doctor          Doctor      @relation(fields: [doctorId], references: [id])
  consultation    Consultation? @relation(fields: [consultationId], references: [id])
  labResults      LabResult[]

  @@map("medical_records")
  @@index([userId])
  @@index([doctorId])
  @@index([visitDate])
}

// ============================================================================
// LAB RESULTS
// ============================================================================

model LabResult {
  id              String        @id @default(uuid())
  userId          String
  medicalRecordId String?
  testName        String
  testType        String
  category        String?
  results         Json
  normalRange     Json?
  isNormal        Boolean?
  isCritical      Boolean       @default(false)
  doctorNotes     String?       @db.Text
  testDate        DateTime
  resultDate      DateTime?
  isNew           Boolean       @default(true)
  reportUrl       String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user            User          @relation(fields: [userId], references: [id])
  medicalRecord   MedicalRecord? @relation(fields: [medicalRecordId], references: [id])

  @@map("lab_results")
  @@index([userId])
  @@index([testDate])
  @@index([isNew])
  @@index([isCritical])
}

// ============================================================================
// NOTIFICATIONS
// ============================================================================

model Notification {
  id            String              @id @default(uuid())
  userId        String
  title         String
  message       String              @db.Text
  type          NotificationType
  priority      NotificationPriority @default(MEDIUM)
  isRead        Boolean             @default(false)
  actionUrl     String?
  relatedData   Json?
  expiresAt     DateTime?
  createdAt     DateTime            @default(now())
  readAt        DateTime?

  // Relations
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@index([type])
}

// ============================================================================
// SYSTEM CONFIG & SETTINGS
// ============================================================================

model SystemConfig {
  id          String    @id @default(uuid())
  key         String    @unique
  value       String    @db.Text
  description String?   @db.Text
  category    String?
  isEditable  Boolean   @default(true)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("system_configs")
  @@index([key])
  @@index([category])
}

// ============================================================================
// AUDIT LOG
// ============================================================================

model AuditLog {
  id          String    @id @default(uuid())
  userId      String?
  action      String
  resource    String
  resourceId  String?
  details     String?   @db.Text
  ipAddress   String?
  timestamp   DateTime  @default(now())

  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([timestamp])
}